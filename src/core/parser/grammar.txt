legend:
    *       0 or more
    +       1 or more
    ()?     optional
    |       or

statements          : NEWLINE* IDENT* statement (NEWLINE+ statement) NEWLINE*

statement           : import-expr
                    : func-as-var-expr
                    : KEYWORD:raise expr
                    : expr

# not implemented yet
import-expr         : import IDENTIFIER (COMMA IDENTIFIER (as IDENTIFIER)?)*
                    | from IDENTIFIER import IDENTIFIER (as IDENTIFIER)? (COMMA IDENTIFIER (as IDENTIFIER)?)*

expr                : IDENTIFIER EQ expr
                    : comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*
                    : expr IN expr
                    : if-expr
                    : pipe-expr
                    : static-access-expr

pattern-match       : map-expr EQ expr
                    | list-expr EQ expr
                    | tuple-expr EQ expr

static-access-expr  : expr LSQUARE expr RSQUARE

comp-expr           : KEYWORD:not comp-expr
                    : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr          : term ((PLUS|MINUS) term)*

term                : factor ((MUL|DIV) factor)*

factor              : (PLUS|MINUS) factor
                    : power

power               : call(POW factor)*

call                : call-expr
                    : atom

call-expr           : atom (
                        LPAREN
                        (expr (COMMA expr)*)?
                        (IDENTIFIER DO expr (COMMA IDENTIFIER EQ expr)*)?
                        RPAREN
                    )?

atom                : INT|FLOAT|IDENTIFIER|STRING|ATOM|PIN IDENTIFIER
                    : LPAREN expr RPAREN
                    : tuple-expr
                    : list-expr
                    : map-expr
                    : func-def
                    : lambda-def
                    : case-def
                    : try-expect-expr

list-expr           : LSQUARE (expr (COMMA expr)*)? RSQUARE

map-expr            : LCURLY ((expr DO expr) (COMMA (expr DO expr))*)? RCURLY

tuple-expr          : LPAREN expr? COMMA (expr COMMA)* RPAREN

if-expr             : expr KEYWORD:if expr DO expr
                    : (KEYWORD:else expr)?

case-def            : KEYWORD:case expr? DO NEWLINE
                    (expr ARROW (statement|statements) NEWLINE)+

pipe-expr           : expr (PIPE expr)+

func-def            : KEYWORD:def IDENTIFIER
                    LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN DO
                    (NEWLINE statements)+

lambda-def          : KEYWORD:lambda (IDENTIFIER (COMMA IDENTIFIER)*)?
                    (DO expr)|(NEWLINE statements)+

func-as-var-expr    : ECOM DIV INT


try-expect-expr     : KEYWORD:try DO NEWLINE statements
                    (KEYWORD:except expr? KEYWORD:as IDENTIFIER DO NEWLINE)+
                    (KEYWORD:finally DO NEWLINE statements)?
