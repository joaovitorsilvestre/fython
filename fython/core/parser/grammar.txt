legend:
    *       0 or more
    +       1 or more
    ()?     optional
    |       or

statements  : NEWLINE* IDENT* statement (NEWLINE+ statement) NEWLINE*

statement   : KEYWORD:return expr?
            : expr

expr        : IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*
            : if-expr

comp-expr   : KEYWORD:not comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call(POW factor)*

call        : pipe-expr
            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|IDENTIFIER|STRING
            : LPAREN expr RPAREN
            : list-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : expr KEYWORD:if expr DO expr
            : (KEYWORD:else expr)?

pipe-expr   : expr (PIPE expr)+

func-def    : KEYWORD:def IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (DO expr)
            | (NEWLINE statements KEYWORD:end)
